diff --git a/cmd/cmd.go b/cmd/cmd.go
index 680f46a..5e9d170 100644
--- a/cmd/cmd.go
+++ b/cmd/cmd.go
@@ -106,7 +106,7 @@ func main() {
 	daemonCmd.Flags().BoolVarP(&isDaemon, "d", "d", false, "是否在后台运行")
 
 	RootCommand := &cobra.Command{
-		Version: fmt.Sprintf("%s", "1.0.9l"),
+		Version: fmt.Sprintf("%s", "1.0.9m"),
 		Short:   "ytfs storage node",
 	}
 	RootCommand.AddCommand(initCmd)
diff --git a/config/config.go b/config/config.go
index 93453fc..cc02e0a 100644
--- a/config/config.go
+++ b/config/config.go
@@ -2,6 +2,7 @@ package config
 
 import (
 	"bytes"
+	"crypto/md5"
 	"encoding/json"
 	"fmt"
 	"github.com/eoscanada/eos-go/btcsuite/btcutil/base58"
@@ -61,6 +62,7 @@ type Config struct {
 	*ytfsOpts.Options
 	UpdateURL string `json:"update_url"`
 	//ShardRbdConcurrent uint16 `json:ShardRbdConcurrent`
+	bpListMd5 []byte
 }
 
 // DefaultYTFSOptions default config
@@ -389,7 +391,7 @@ func (cfg *Config) PrivKeyString() string {
 }
 
 func (cfg *Config) Version() uint32 {
-	return 130
+	return 131
 }
 
 func Version() uint32 {
@@ -412,7 +414,19 @@ func (cfg Config) GetAPIAddr() string {
 	//if err != nil {
 	//	return ""
 	//}
+
 	return fmt.Sprintf("http://%s:%s", addrs[2], "8082")
 }
 
+func (cfg *Config)BPMd5()[]byte{
+	if cfg.bpListMd5 == nil {
+		m5:=md5.New()
+		for _,v:= range cfg.BPList{
+			m5.Write([]byte(v.ID))
+		}
+		cfg.bpListMd5 = m5.Sum(nil)
+	}
+	return cfg.bpListMd5
+}
+
 var DefaultConfig, _ = ReadConfig()
diff --git a/recover/recover.go b/recover/recover.go
index f58a527..57cc14c 100644
--- a/recover/recover.go
+++ b/recover/recover.go
@@ -209,39 +209,6 @@ func (re *RecoverEngine) getShard2(ctx context.Context, id string, taskID string
 	return nil,nil    //refer to getShard
 }
 
-func (re *RecoverEngine) parmCheck(id string, taskID string, addrs []string, hash []byte, n *int,sw *Switchcnt) ([]byte,error){
-	if 0 == sw.swget{
-		re.IncShardForRbd()
-		sw.swget++
-	}
-
-	re.IncGetShardWK()
-	btid, err := base58.Decode(taskID)
-	if err != nil {
-		re.IncFailDcdTask()
-		return btid,err
-	}
-
-	if 0 == len(id) {
-		err = fmt.Errorf("zero length id")
-		re.IncFailDcdTask()
-		return  btid,err
-	}
-
-	if 0 == len(addrs) {
-		err = fmt.Errorf("zero length addrs")
-		re.IncFailDcdTask()
-		return  btid,err
-	}
-
-	if 0 == len(hash) {
-		err = fmt.Errorf("zero length hash")
-		re.IncFailDcdTask()
-		return  btid,err
-	}
-	return btid, nil
-}
-
 //func (re *RecoverEngine) reportLog( body interface{}){
 //	bodyBytes, err:=json.Marshal(body)
 //	resp, err := http.Post(url, contentType, bytes.NewReader(bodyBytes))
@@ -259,10 +226,13 @@ func (re *RecoverEngine) reportLog(body *RcvDbgLog){
 		Password:  "dnreporter@yottachain",
 	}
 
+	logtb := re.sn.Config().BPMd5()
+	tbstr := "dnlog-"+string(logtb)
+
 	ytESConfig := conf.YTESConfig{
 		ESConf:      elkConf,
 		DebugMode:   true,
-		IndexPrefix: "main-net-dn",
+		IndexPrefix: tbstr,
 		IndexType:   "log",
 	}
 
@@ -284,11 +254,48 @@ func (re *RecoverEngine) MakeReportLog(nodeid string, hash []byte, errtype strin
 	}
 }
 
+func (re *RecoverEngine) parmCheck(id string, taskID string, addrs []string, hash []byte, n *int,sw *Switchcnt) ([]byte,error){
+	if 0 == sw.swget{
+		re.IncShardForRbd()
+		sw.swget++
+	}
+
+	re.IncGetShardWK()
+	btid, err := base58.Decode(taskID)
+	if err != nil {
+		re.IncFailDcdTask()
+		return btid,err
+	}
+
+	if 0 == len(id) {
+		err = fmt.Errorf("zero length id")
+		re.IncFailDcdTask()
+		return  btid,err
+	}
+
+	if 0 == len(addrs) {
+		err = fmt.Errorf("zero length addrs")
+		re.IncFailDcdTask()
+		return  btid,err
+	}
+
+	if 0 == len(hash) {
+		err = fmt.Errorf("zero length hash")
+		re.IncFailDcdTask()
+		return  btid,err
+	}
+	return btid, nil
+}
+
+
+
+
 func (re *RecoverEngine) getShard( id string, taskID string, addrs []string, hash []byte, n *int,sw *Switchcnt) ([]byte, error) {
 
 	btid,err:=re.parmCheck(id, taskID, addrs, hash, n, sw)
 
 	if err !=nil {
+		log.Println("[recover] parmcheck error :",err)
 		return nil, err
 	}
 
@@ -310,7 +317,7 @@ func (re *RecoverEngine) getShard( id string, taskID string, addrs []string, has
 		sw.swconn++
 	}
 
-/*********************************************
+///*********************************************
 	var getToken message.NodeCapacityRequest
 	var resGetToken message.NodeCapacityResponse
 	getToken.RequestMsgID = message.MsgIDMultiTaskDescription.Value()
@@ -319,10 +326,10 @@ func (re *RecoverEngine) getShard( id string, taskID string, addrs []string, has
 	re.GetConShardPass()
 	ctxto, cancels := context.WithTimeout(context.Background(), time.Second*10)
 	defer cancels()
-**********************************************/
+//**********************************************/
 
 
-/*************************************************
+///*************************************************
 	tok, err := clt.SendMsg(ctxto, message.MsgIDNodeCapacityRequest.Value(), getTokenData)
 
 	if err != nil {
@@ -357,6 +364,11 @@ func (re *RecoverEngine) getShard( id string, taskID string, addrs []string, has
 		return nil,err
 	}
 
+	if 0 == sw.swtoken {
+		re.IncSuccToken()
+		sw.swtoken++
+	}
+
 	var msg message.DownloadShardRequest
 	var res message.DownloadShardResponse
 	msg.VHF = hash
@@ -370,32 +382,28 @@ func (re *RecoverEngine) getShard( id string, taskID string, addrs []string, has
 		return nil, err
 	}
 	log.Printf("[recover]get shard msg buf len(%d)\n", len(buf))
-**************************************/
-	if 0 == sw.swtoken {
-		re.IncSuccToken()
-		sw.swtoken++
-	}
+//**************************************/
 
-	var msg message.DownloadShardRequest
+
+	//var msg message.DownloadShardRequest
 	//var res message.DownloadShardResponse
 
-	msg.VHF = hash
-	buf, err := proto.Marshal(&msg)
-	if err != nil {
-		//re.IncFailToken()
-		log.Printf("[recover:%d] failToken[%v] get shard [%s] error[%d] %s\n", BytesToInt64(btid[0:8]), re.rcvstat.failToken, base64.StdEncoding.EncodeToString(hash), *n, err.Error())
-		re.ReturnConShardPass()
-		return nil, err
-	}
+	//msg.VHF = hash
+	//buf, err := proto.Marshal(&msg)
+	//if err != nil {
+	//	//re.IncFailToken()
+	//	log.Printf("[recover:%d] failToken[%v] get shard [%s] error[%d] %s\n", BytesToInt64(btid[0:8]), re.rcvstat.failToken, base64.StdEncoding.EncodeToString(hash), *n, err.Error())
+	//	re.ReturnConShardPass()
+	//	return nil, err
+	//}
 
-	var res message.DownloadShardResponse
+	//var res message.DownloadShardResponse
 	ctx2, cancel := context.WithTimeout(context.Background(), time.Second*10)
 	defer cancel()
 
 	re.IncConShard()
 	shardBuf, err := clt.SendMsg(ctx2, message.MsgIDDownloadShardRequest.Value(), buf)
-	//shardBuf, err := clt.SendMsg(ctx2, message.MsgIDDownloadShardRequest.Value(), buf)
-	//shardBuf, err := clt.SendMsgClose(ctx2, message.MsgIDDownloadShardRequest.Value(), nil)
+
 	re.DecConShard()
 	re.ReturnConShardPass()
 
@@ -427,7 +435,7 @@ func (re *RecoverEngine) getShard( id string, taskID string, addrs []string, has
 		return nil, err
 	}
 
-/***************************************
+///***************************************
 	bkctxto, cancels2 := context.WithTimeout(context.Background(), time.Second*5)
 	defer cancels2()
 
@@ -442,7 +450,7 @@ func (re *RecoverEngine) getShard( id string, taskID string, addrs []string, has
 		re.IncSuccPutTok()
 		log.Println("[recover] return token Success,successPutTok=",re.rcvstat.successPutToken)
 	}
- *************************************************/
+ //*************************************************/
 	if 0 == sw.swshard {
 		re.IncSuccShard()
 		sw.swshard++
diff --git a/recover/recoverpool.go b/recover/recoverpool.go
index e2d9f1e..f076d6c 100644
--- a/recover/recoverpool.go
+++ b/recover/recoverpool.go
@@ -11,7 +11,7 @@ var getShardPool chan int
 var poolG chan int
 var totalCap int = 2000
 var realConCurrent uint16 = 1     //can be changed by write-weight and config
-var realConTask uint16 = 1
+var realConTask uint16 = 10
 
 func (re *RecoverEngine) doRequest(task *Task, pkgstart time.Time){
     re.IncConTask()
@@ -123,7 +123,7 @@ func (re *RecoverEngine)RunPool(){
 
 	go re.processRequests()
 
-	//go re.modifyPoolSize()
+	go re.modifyPoolSize()
 
 	for i := uint16(0); i < realConCurrent; i++ {
 		getShardPool <- 0
diff --git a/version b/version
index 6d9ccaf..1183d0f 100644
--- a/version
+++ b/version
@@ -1 +1 @@
-version=1.0.9l
+version=1.0.9m
